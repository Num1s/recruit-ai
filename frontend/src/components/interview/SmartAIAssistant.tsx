import React, { useState, useEffect, useCallback } from 'react';
import { Card, Typography, Space, Avatar, Badge, Button, Tooltip, List, Progress, Alert, Modal } from 'antd';
import { 
  RobotOutlined, 
  BulbOutlined, 
  CheckCircleOutlined, 
  ExclamationCircleOutlined,
  ThunderboltOutlined,
  HeartOutlined,
  StarOutlined,
  MessageOutlined,
  SoundOutlined,
  EyeOutlined,
  ClockCircleOutlined,
  TrophyOutlined,
  SendOutlined,
  CloseOutlined
} from '@ant-design/icons';

const { Title, Text, Paragraph } = Typography;

interface AIFeedback {
  id: string;
  type: 'positive' | 'suggestion' | 'warning' | 'motivation' | 'tip';
  message: string;
  timestamp: number;
  priority: 'low' | 'medium' | 'high';
  category: 'speech' | 'content' | 'behavior' | 'general';
  actionable?: boolean;
  actionText?: string;
  onAction?: () => void;
}

interface SmartAIAssistantProps {
  currentQuestion?: string;
  speechMetrics?: {
    volume: number;
    clarity: number;
    pace: number;
    confidence: number;
  };
  performanceMetrics?: {
    responseTime: number;
    completeness: number;
    relevance: number;
  };
  interviewPhase?: 'waiting' | 'speaking' | 'listening' | 'processing';
  onFeedbackAction?: (feedbackId: string, action: string) => void;
}

const SmartAIAssistant: React.FC<SmartAIAssistantProps> = ({
  currentQuestion,
  speechMetrics,
  performanceMetrics,
  interviewPhase = 'waiting',
  onFeedbackAction
}) => {
  const [feedback, setFeedback] = useState<AIFeedback[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [assistantMood, setAssistantMood] = useState<'encouraging' | 'analytical' | 'supportive'>('encouraging');
  const [showChat, setShowChat] = useState(false);
  const [chatMessages, setChatMessages] = useState<Array<{
    id: string;
    type: 'user' | 'ai';
    message: string;
    timestamp: number;
  }>>([]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
  const generateSmartFeedback = useCallback(() => {
    const newFeedback: AIFeedback[] = [];

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏
    if (speechMetrics) {
      if (speechMetrics.volume < 40) {
        newFeedback.push({
          id: `volume-${Date.now()}`,
          type: 'suggestion',
          message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≥—Ä–æ–º—á–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—É –ª—É—á—à–µ –≤–∞—Å —Å–ª—ã—à–∞—Ç—å.',
          timestamp: Date.now(),
          priority: 'medium',
          category: 'speech',
          actionable: true,
          actionText: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω',
          onAction: () => onFeedbackAction?.(`volume-${Date.now()}`, 'check_microphone')
        });
      }

      if (speechMetrics.pace > 80) {
        newFeedback.push({
          id: `pace-${Date.now()}`,
          type: 'suggestion',
          message: '–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –ì–æ–≤–æ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –≤–∞—à–∏ –º—ã—Å–ª–∏ –±—ã–ª–∏ –ø–æ–Ω—è—Ç–Ω—ã.',
          timestamp: Date.now(),
          priority: 'medium',
          category: 'speech',
          actionable: true,
          actionText: '–°–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É',
          onAction: () => onFeedbackAction?.(`pace-${Date.now()}`, 'take_pause')
        });
      }

      if (speechMetrics.clarity > 75) {
        newFeedback.push({
          id: `clarity-${Date.now()}`,
          type: 'positive',
          message: '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ä–µ—á—å –æ—á–µ–Ω—å —á–µ—Ç–∫–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è.',
          timestamp: Date.now(),
          priority: 'low',
          category: 'speech'
        });
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (performanceMetrics) {
      if (performanceMetrics.responseTime > 8) {
        newFeedback.push({
          id: `response-${Date.now()}`,
          type: 'suggestion',
          message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ. –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –∑–∞—Ç—è–≥–∏–≤–∞–π—Ç–µ.',
          timestamp: Date.now(),
          priority: 'medium',
          category: 'behavior',
          actionable: true,
          actionText: '–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å',
          onAction: () => onFeedbackAction?.(`response-${Date.now()}`, 'start_answering')
        });
      }

      if (performanceMetrics.completeness < 50) {
        newFeedback.push({
          id: `completeness-${Date.now()}`,
          type: 'tip',
          message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤.',
          timestamp: Date.now(),
          priority: 'high',
          category: 'content',
          actionable: true,
          actionText: '–†–∞—Å—à–∏—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç',
          onAction: () => onFeedbackAction?.(`completeness-${Date.now()}`, 'expand_answer')
        });
      }
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (currentQuestion) {
      if (currentQuestion.toLowerCase().includes('–æ–ø—ã—Ç') || currentQuestion.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç')) {
        newFeedback.push({
          id: `experience-${Date.now()}`,
          type: 'tip',
          message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ STAR: –°–∏—Ç—É–∞—Ü–∏—è, –ó–∞–¥–∞—á–∞, –î–µ–π—Å—Ç–≤–∏–µ, –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ.',
          timestamp: Date.now(),
          priority: 'medium',
          category: 'content'
        });
      }

      if (currentQuestion.toLowerCase().includes('—Å–ª–∞–±–æ—Å—Ç') || currentQuestion.toLowerCase().includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–∫')) {
        newFeedback.push({
          id: `weakness-${Date.now()}`,
          type: 'tip',
          message: '–ì–æ–≤–æ—Ä–∏—Ç–µ –æ —Å–ª–∞–±–æ—Å—Ç—è—Ö —á–µ—Å—Ç–Ω–æ, –Ω–æ –ø–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –∏—Ö —É–ª—É—á—à–µ–Ω–∏–µ–º.',
          timestamp: Date.now(),
          priority: 'high',
          category: 'content'
        });
      }
    }

    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (Math.random() > 0.7) {
      const motivationalMessages = [
        '–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.',
        '–í–∞—à–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º. –≠—Ç–æ –∑–∞–º–µ—Ç–Ω–æ!',
        '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
        '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.'
      ];

      newFeedback.push({
        id: `motivation-${Date.now()}`,
        type: 'motivation',
        message: motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)],
        timestamp: Date.now(),
        priority: 'low',
        category: 'general'
      });
    }

    return newFeedback;
  }, [speechMetrics, performanceMetrics, currentQuestion, onFeedbackAction]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    const avgMetrics = speechMetrics ? 
      (speechMetrics.volume + speechMetrics.clarity + speechMetrics.confidence) / 3 : 50;
    
    if (avgMetrics > 70) {
      setAssistantMood('encouraging');
    } else if (avgMetrics > 40) {
      setAssistantMood('analytical');
    } else {
      setAssistantMood('supportive');
    }
  }, [speechMetrics]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–¥–±–µ–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫
  useEffect(() => {
    if (interviewPhase === 'speaking') {
      const newFeedback = generateSmartFeedback();
      if (newFeedback.length > 0) {
        setIsTyping(true);
        setTimeout(() => {
          setFeedback(prev => [...prev.slice(-4), ...newFeedback]);
          setIsTyping(false);
        }, 1000);
      }
    }
  }, [speechMetrics, performanceMetrics, interviewPhase, generateSmartFeedback]);

  const getFeedbackIcon = (type: string) => {
    switch (type) {
      case 'positive': return <CheckCircleOutlined style={{ color: '#52c41a' }} />;
      case 'suggestion': return <BulbOutlined style={{ color: '#faad14' }} />;
      case 'warning': return <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />;
      case 'motivation': return <HeartOutlined style={{ color: '#eb2f96' }} />;
      case 'tip': return <ThunderboltOutlined style={{ color: '#722ed1' }} />;
      default: return <MessageOutlined />;
    }
  };

  const getFeedbackColor = (type: string) => {
    switch (type) {
      case 'positive': return '#52c41a';
      case 'suggestion': return '#faad14';
      case 'warning': return '#ff4d4f';
      case 'motivation': return '#eb2f96';
      case 'tip': return '#722ed1';
      default: return '#1890ff';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return '#ff4d4f';
      case 'medium': return '#faad14';
      case 'low': return '#52c41a';
      default: return '#1890ff';
    }
  };

  const getAssistantAvatar = () => {
    switch (assistantMood) {
      case 'encouraging': return 'üòä';
      case 'analytical': return 'ü§î';
      case 'supportive': return 'ü§ó';
      default: return 'ü§ñ';
    }
  };

  const handleChatMessage = (message: string) => {
    const userMessage = {
      id: `user-${Date.now()}`,
      type: 'user' as const,
      message,
      timestamp: Date.now()
    };

    setChatMessages(prev => [...prev, userMessage]);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
    setTimeout(() => {
      const aiResponses = [
        '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ!',
        '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ.',
        '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —É –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è!',
        '–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤—å—é - —ç—Ç–æ –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ —ç–∫–∑–∞–º–µ–Ω.',
        '–í–∞—à–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º!'
      ];

      const aiMessage = {
        id: `ai-${Date.now()}`,
        type: 'ai' as const,
        message: aiResponses[Math.floor(Math.random() * aiResponses.length)],
        timestamp: Date.now()
      };

      setChatMessages(prev => [...prev, aiMessage]);
    }, 1500);
  };

  const renderFeedbackItem = (item: AIFeedback) => (
    <div 
      key={item.id} 
      className={`ai-feedback-item ai-feedback-${item.type}`}
      style={{ 
        borderLeft: `4px solid ${getFeedbackColor(item.type)}`,
        backgroundColor: `${getFeedbackColor(item.type)}10`
      }}
    >
      <div className="feedback-header">
        <Space>
          {getFeedbackIcon(item.type)}
          <Text strong style={{ color: getFeedbackColor(item.type) }}>
            {item.type === 'positive' ? '–û—Ç–ª–∏—á–Ω–æ!' :
             item.type === 'suggestion' ? '–°–æ–≤–µ—Ç' :
             item.type === 'warning' ? '–í–Ω–∏–º–∞–Ω–∏–µ' :
             item.type === 'motivation' ? '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' : '–ü–æ–¥—Å–∫–∞–∑–∫–∞'}
          </Text>
          <Badge 
            color={getPriorityColor(item.priority)} 
            text={item.priority}
            size="small"
          />
        </Space>
      </div>
      
      <div className="feedback-content">
        <Text style={{ color: 'rgba(255,255,255,0.9)' }}>
          {item.message}
        </Text>
      </div>

      {item.actionable && item.actionText && (
        <div className="feedback-action">
          <Button 
            type="primary" 
            size="small"
            onClick={item.onAction}
            style={{ 
              backgroundColor: getFeedbackColor(item.type),
              borderColor: getFeedbackColor(item.type)
            }}
          >
            {item.actionText}
          </Button>
        </div>
      )}

      <div className="feedback-timestamp">
        <Text type="secondary" style={{ fontSize: '12px' }}>
          {new Date(item.timestamp).toLocaleTimeString()}
        </Text>
      </div>
    </div>
  );

  const renderChatModal = () => (
    <Modal
      title={
        <Space>
          <Avatar style={{ backgroundColor: '#a8edea' }}>
            {getAssistantAvatar()}
          </Avatar>
          <Text style={{ color: 'rgba(255,255,255,0.95)' }}>
            AI –ü–æ–º–æ—â–Ω–∏–∫
          </Text>
        </Space>
      }
      open={showChat}
      onCancel={() => setShowChat(false)}
      footer={null}
      width={500}
      className="ai-chat-modal"
    >
      <div className="chat-messages">
        {chatMessages.map(message => (
          <div 
            key={message.id} 
            className={`chat-message ${message.type}`}
          >
            <div className="message-content">
              <Text style={{ color: 'rgba(255,255,255,0.9)' }}>
                {message.message}
              </Text>
            </div>
            <div className="message-time">
              <Text type="secondary" style={{ fontSize: '12px' }}>
                {new Date(message.timestamp).toLocaleTimeString()}
              </Text>
            </div>
          </div>
        ))}
      </div>
      
      <div className="chat-input">
        <Button 
          type="primary" 
          onClick={() => handleChatMessage('–ö–∞–∫ –º–Ω–µ –ª—É—á—à–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã?')}
          icon={<SendOutlined />}
        >
          –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        </Button>
      </div>
    </Modal>
  );

  return (
    <div className="smart-ai-assistant">
      <Card 
        title={
          <Space>
            <Avatar style={{ backgroundColor: '#a8edea' }}>
              {getAssistantAvatar()}
            </Avatar>
            <Text style={{ color: 'rgba(255,255,255,0.95)' }}>
              AI –ü–æ–º–æ—â–Ω–∏–∫
            </Text>
            {isTyping && (
              <Badge 
                status="processing" 
                text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
                style={{ color: 'rgba(255,255,255,0.7)' }}
              />
            )}
          </Space>
        }
        extra={
          <Space>
            <Tooltip title="–ß–∞—Ç —Å AI">
              <Button 
                type="text" 
                icon={<MessageOutlined />}
                onClick={() => setShowChat(true)}
              />
            </Tooltip>
            <Tooltip title="–°–∫—Ä—ã—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞">
              <Button 
                type="text" 
                icon={<CloseOutlined />}
              />
            </Tooltip>
          </Space>
        }
        className="ai-assistant-card"
      >
        <div className="assistant-status">
          <Space>
            <Text type="secondary">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</Text>
            <Badge 
              color={assistantMood === 'encouraging' ? '#52c41a' : 
                     assistantMood === 'analytical' ? '#faad14' : '#1890ff'}
              text={assistantMood === 'encouraging' ? '–ü–æ–æ—â—Ä—è—é—â–∏–π' :
                    assistantMood === 'analytical' ? '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π' : '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π'}
            />
          </Space>
        </div>

        <div className="feedback-list">
          {feedback.length > 0 ? (
            feedback.slice(-3).map(renderFeedbackItem)
          ) : (
            <div className="no-feedback">
              <Text style={{ color: 'rgba(255,255,255,0.6)', fontStyle: 'italic' }}>
                AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤ –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã...
              </Text>
            </div>
          )}
        </div>

        {interviewPhase === 'speaking' && (
          <Alert
            message="–ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ"
            description="AI –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–π —Ä–µ—á–∏ –∏ –¥–∞—Å—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
            type="info"
            showIcon
            style={{ marginTop: '1rem' }}
          />
        )}
      </Card>

      {renderChatModal()}
    </div>
  );
};

export default SmartAIAssistant;
