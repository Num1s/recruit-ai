version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: recruit_ai_postgres
    environment:
      POSTGRES_USER: recruit_ai_user
      POSTGRES_PASSWORD: recruit_ai_password
      POSTGRES_DB: recruit_ai
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recruit_ai_user -d recruit_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: recruit_ai_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: recruit_ai_backend
    environment:
      - DATABASE_URL=postgresql://recruit_ai_user:recruit_ai_password@postgres:5432/recruit_ai
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=False
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: recruit_ai_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./src:/app/src
      - ./public:/app/public

  # Nginx (for production)
  nginx:
    image: nginx:alpine
    container_name: recruit_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - uploads_data:/var/www/uploads
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
  uploads_data:

networks:
  default:
    name: recruit_ai_network
