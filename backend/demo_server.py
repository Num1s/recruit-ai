"""
–ü—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Recruit.ai
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ frontend
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import uvicorn

app = FastAPI(
    title="Recruit.ai Demo API",
    description="–î–µ–º–æ API –¥–ª—è HR-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class LoginRequest(BaseModel):
    email: str
    password: str

class RegisterRequest(BaseModel):
    email: str
    password: str
    first_name: str
    last_name: str
    role: str
    phone: Optional[str] = None
    company_name: Optional[str] = None

class Token(BaseModel):
    access_token: str
    token_type: str
    expires_in: int
    user: dict

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
mock_users = {}

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Recruit.ai Demo API",
        "version": "1.0.0",
        "status": "running"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "recruit-ai-demo"}

@app.post("/api/auth/register")
async def register(user_data: RegisterRequest):
    """–î–µ–º–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_data.email in mock_users:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mock_users[user_data.email] = {
        "id": len(mock_users) + 1,
        "email": user_data.email,
        "first_name": user_data.first_name,
        "last_name": user_data.last_name,
        "role": user_data.role,
        "phone": user_data.phone,
        "company_name": user_data.company_name
    }
    
    user = mock_users[user_data.email]
    
    return {
        "access_token": f"demo_token_{user['id']}",
        "token_type": "bearer",
        "expires_in": 1800,
        "user": {
            "id": user["id"],
            "email": user["email"],
            "first_name": user["first_name"],
            "last_name": user["last_name"],
            "role": user["role"]
        }
    }

@app.post("/api/auth/login")
async def login(login_data: LoginRequest):
    """–î–µ–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ö–æ–¥–∏—Ç
    if len(login_data.password) < 3:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if login_data.email not in mock_users:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ –¥–æ–º–µ–Ω—É email
        role = "company" if "company" in login_data.email or "@corp" in login_data.email else "candidate"
        
        mock_users[login_data.email] = {
            "id": len(mock_users) + 1,
            "email": login_data.email,
            "first_name": "–î–µ–º–æ",
            "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "role": role,
            "phone": None,
            "company_name": "–î–µ–º–æ –ö–æ–º–ø–∞–Ω–∏—è" if role == "company" else None
        }
    
    user = mock_users[login_data.email]
    
    return {
        "access_token": f"demo_token_{user['id']}",
        "token_type": "bearer", 
        "expires_in": 1800,
        "user": {
            "id": user["id"],
            "email": user["email"],
            "first_name": user["first_name"],
            "last_name": user["last_name"],
            "role": user["role"]
        }
    }

@app.get("/api/auth/me")
async def get_current_user():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–º–æ)"""
    return {
        "id": 1,
        "email": "demo@recruit.ai",
        "first_name": "–î–µ–º–æ",
        "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "role": "candidate"
    }

@app.post("/api/auth/logout")
async def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    return {"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}

@app.get("/api/users/profile/candidate")
async def get_candidate_profile():
    """–î–µ–º–æ –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    return {
        "id": 1,
        "email": "demo@recruit.ai",
        "first_name": "–î–µ–º–æ",
        "last_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç",
        "role": "candidate",
        "candidate_profile": {
            "id": 1,
            "summary": "–û–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "experience_years": 5,
            "skills": ["Python", "React", "TypeScript"]
        }
    }

@app.get("/api/users/profile/company") 
async def get_company_profile():
    """–î–µ–º–æ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏"""
    return {
        "id": 1,
        "email": "demo@company.com",
        "first_name": "–î–µ–º–æ",
        "last_name": "–ö–æ–º–ø–∞–Ω–∏—è",
        "role": "company",
        "company_profile": {
            "id": 1,
            "company_name": "–î–µ–º–æ IT –ö–æ–º–ø–∞–Ω–∏—è",
            "description": "–í–µ–¥—É—â–∞—è IT –∫–æ–º–ø–∞–Ω–∏—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞"
        }
    }

@app.post("/api/users/upload/cv")
async def upload_cv():
    """–î–µ–º–æ –∑–∞–≥—Ä—É–∑–∫–∞ CV"""
    return {
        "message": "–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
        "filename": "demo_cv.pdf"
    }

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Recruit.ai Demo Server...")
    print("üì° API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:8000")
    print("üìä –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    
    uvicorn.run(
        "demo_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )



