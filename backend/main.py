"""
Recruit.ai - HR Platform Main Application
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è HR-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""

# Standard library imports
import os
from contextlib import asynccontextmanager

# Third-party imports
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from dotenv import load_dotenv

# Local imports
from app.core.config import settings
from app.core.database import engine, Base
from app.core.exceptions import setup_exception_handlers
from app.api.routes import auth, users, companies, jobs, interviews, reports, streams, analytics, integrations

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    load_dotenv()
except Exception as e:
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª: {e}")
    print("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

# Constants
UPLOADS_DIR = "uploads"
FRONTEND_BUILD_DIR = os.path.join(os.path.dirname(__file__), "..", "frontend", "build")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    print("üöÄ –ó–∞–ø—É—Å–∫ Recruit.ai...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
    os.makedirs(UPLOADS_DIR, exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Base.metadata.create_all(bind=engine)
    
    yield
    
    # Shutdown
    print("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Recruit.ai...")

app = FastAPI(
    title="Recruit.ai API",
    description="–í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è HR-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è IT –∏ —Ñ–∏–Ω—Ç–µ—Ö–∞ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞",
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Exception handlers
setup_exception_handlers(app)

# API routes
app.include_router(auth.router, prefix="/api/auth", tags=["authentication"])
app.include_router(users.router, prefix="/api/users", tags=["users"])
app.include_router(companies.router, prefix="/api/companies", tags=["companies"])
app.include_router(jobs.router, prefix="/api/jobs", tags=["jobs"])
app.include_router(interviews.router, prefix="/api/interviews", tags=["interviews"])
app.include_router(reports.router, prefix="/api/reports", tags=["reports"])
app.include_router(streams.router, prefix="/api/streams", tags=["streams"])
app.include_router(analytics.router, prefix="/api/analytics", tags=["analytics"])
app.include_router(integrations.router, prefix="/api/integrations", tags=["integrations"])

# Static files mounting (—Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
os.makedirs(UPLOADS_DIR, exist_ok=True)
app.mount("/uploads", StaticFiles(directory=UPLOADS_DIR), name="uploads")

# Frontend static files (React build)
if os.path.exists(FRONTEND_BUILD_DIR):
    static_dir = os.path.join(FRONTEND_BUILD_DIR, "static")
    if os.path.exists(static_dir):
        app.mount("/static", StaticFiles(directory=static_dir), name="static")

@app.get("/api")
async def api_root():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Recruit.ai API",
        "version": "1.0.0",
        "docs": "/api/docs"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "recruit-ai"}

# SPA fallback - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
@app.get("/{full_path:path}")
async def serve_spa(request: Request, full_path: str):
    """
    –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ SPA - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç index.html –¥–ª—è –≤—Å–µ—Ö –Ω–µ-API —Ä–æ—É—Ç–æ–≤
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç React Router –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ä–æ—É—Ç—ã
    """
    # –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if full_path.startswith("api/") or full_path.startswith("docs") or full_path.startswith("redoc"):
        # –≠—Ç–∏ —Ä–æ—É—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
        raise HTTPException(status_code=404, detail="Not found")
    
    # –ü—É—Ç—å –∫ index.html
    index_file = os.path.join(FRONTEND_BUILD_DIR, "index.html")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if os.path.exists(index_file):
        return FileResponse(index_file)
    
    # –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ —Å–æ–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    return {
        "message": "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "instructions": [
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É frontend: cd frontend",
            "2. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: npm run build",
            "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä"
        ],
        "api_docs": "/api/docs"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG
    )

