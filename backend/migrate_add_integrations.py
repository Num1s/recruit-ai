"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine, text
from app.core.config import settings
from app.core.database import Base
from app.models.integration import (
    PlatformIntegration, ExternalCandidate, IntegrationLog, CandidateImport
)

def create_integration_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    engine = create_engine(settings.DATABASE_URL)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name LIKE '%integration%' OR name LIKE '%external%'
            """))
            tables = result.fetchall()
            print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False
    
    return True

def add_sample_integrations():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    
    from sqlalchemy.orm import sessionmaker
    from app.models.integration import IntegrationPlatform, IntegrationStatus
    from app.models.user import User, UserRole
    
    engine = create_engine(settings.DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = db.query(User).filter(User.role == UserRole.ADMIN).first()
        if not admin:
            print("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        sample_integrations = [
            {
                "platform": IntegrationPlatform.LINKEDIN,
                "name": "LinkedIn Integration",
                "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LinkedIn –¥–ª—è –ø–æ–∏—Å–∫–∞ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
                "is_active": False,
                "auto_sync": True,
                "sync_interval_hours": 24,
                "search_keywords": ["Python", "React", "JavaScript", "Django", "FastAPI"],
                "search_locations": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–£–¥–∞–ª–µ–Ω–Ω–æ"],
                "search_experience_min": 2,
                "search_experience_max": 10,
                "search_salary_min": 80000,
                "search_salary_max": 300000,
                "status": IntegrationStatus.PENDING,
                "created_by": admin.id
            },
            {
                "platform": IntegrationPlatform.HH_RU,
                "name": "HH.ru Integration",
                "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å HeadHunter –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                "is_active": False,
                "auto_sync": True,
                "sync_interval_hours": 12,
                "search_keywords": ["Frontend", "Backend", "Full Stack", "DevOps"],
                "search_locations": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"],
                "search_experience_min": 1,
                "search_experience_max": 8,
                "search_salary_min": 60000,
                "search_salary_max": 250000,
                "status": IntegrationStatus.PENDING,
                "created_by": admin.id
            }
        ]
        
        for integration_data in sample_integrations:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            existing = db.query(PlatformIntegration).filter(
                PlatformIntegration.platform == integration_data["platform"]
            ).first()
            
            if not existing:
                integration = PlatformIntegration(**integration_data)
                db.add(integration)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_data['name']}")
            else:
                print(f"‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è {integration_data['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        db.commit()
        print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    
    if create_integration_tables():
        add_sample_integrations()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
