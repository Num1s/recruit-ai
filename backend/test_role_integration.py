#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ–ª–µ–π –∏ –ø–æ—Ç–æ–∫–æ–≤ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000/api"
HEADERS = {"Content-Type": "application/json"}

class RoleIntegrationTester:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(HEADERS)
        self.tokens = {}
        self.users = {}
        self.streams = {}
    
    def log(self, message, status="INFO"):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] [{status}] {message}")
    
    def test_api_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            response = self.session.get(f"{API_BASE_URL}")
            if response.status_code == 200:
                self.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                self.log(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
                return False
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}", "ERROR")
            return False
    
    def create_test_user(self, email, password, role, first_name="Test", last_name="User"):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            "email": email,
            "password": password,
            "first_name": first_name,
            "last_name": last_name,
            "role": role,
            "phone": "+996555123456"
        }
        
        try:
            response = self.session.post(f"{API_BASE_URL}/auth/register", json=user_data)
            if response.status_code == 200:
                data = response.json()
                self.users[role] = {
                    "email": email,
                    "password": password,
                    "token": data.get("access_token"),
                    "user_data": data.get("user")
                }
                self.log(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {role} —Å–æ–∑–¥–∞–Ω: {email}")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {role}: {response.text}", "ERROR")
                return False
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {role}: {e}", "ERROR")
            return False
    
    def login_user(self, email, password, role):
        """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É"""
        login_data = {
            "email": email,
            "password": password
        }
        
        try:
            response = self.session.post(f"{API_BASE_URL}/auth/login", json=login_data)
            if response.status_code == 200:
                data = response.json()
                self.tokens[role] = data.get("access_token")
                self.log(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {role} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {role}: {response.text}", "ERROR")
                return False
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {role}: {e}", "ERROR")
            return False
    
    def set_auth_header(self, role):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if role in self.tokens:
            self.session.headers.update({"Authorization": f"Bearer {self.tokens[role]}"})
            return True
        else:
            self.log(f"‚ùå –¢–æ–∫–µ–Ω –¥–ª—è —Ä–æ–ª–∏ {role} –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return False
    
    def test_stream_management(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏...")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Recruit Lead)
        if "recruit_lead" in self.tokens:
            self.set_auth_header("recruit_lead")
            
            stream_data = {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ Frontend",
                "senior_recruiter_id": self.users.get("senior_recruiter", {}).get("user_data", {}).get("id")
            }
            
            try:
                response = self.session.post(f"{API_BASE_URL}/streams/", json=stream_data)
                if response.status_code == 200:
                    data = response.json()
                    self.streams["test_stream"] = data
                    self.log("‚úÖ –ü–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞: {response.text}", "ERROR")
                    return False
            except Exception as e:
                self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}", "ERROR")
                return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
        try:
            response = self.session.get(f"{API_BASE_URL}/streams/")
            if response.status_code == 200:
                streams = response.json()
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(streams)} –ø–æ—Ç–æ–∫–æ–≤")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤: {response.text}", "ERROR")
                return False
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤: {e}", "ERROR")
            return False
        
        return True
    
    def test_user_management(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
        
        if "admin" not in self.tokens:
            self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ admin", "WARNING")
            return True
        
        self.set_auth_header("admin")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é recruiter
        user_data = {
            "email": "test.recruiter@example.com",
            "password": "testpass123",
            "first_name": "Test",
            "last_name": "Recruiter",
            "role": "recruiter",
            "stream_id": list(self.streams.values())[0].get("id") if self.streams else None
        }
        
        try:
            response = self.session.post(f"{API_BASE_URL}/users/", json=user_data)
            if response.status_code == 200:
                self.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–µ–∫—Ä—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {response.text}", "ERROR")
                return False
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {e}", "ERROR")
            return False
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤
        try:
            response = self.session.get(f"{API_BASE_URL}/users/recruiters")
            if response.status_code == 200:
                recruiters = response.json()
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(recruiters)} —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤: {response.text}", "ERROR")
                return False
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤: {e}", "ERROR")
            return False
        
        return True
    
    def test_analytics(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        # –¢–µ—Å—Ç –¥–ª—è Recruit Lead
        if "recruit_lead" in self.tokens:
            self.set_auth_header("recruit_lead")
            
            try:
                response = self.session.get(f"{API_BASE_URL}/analytics/dashboard")
                if response.status_code == 200:
                    data = response.json()
                    self.log("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.text}", "ERROR")
                    return False
            except Exception as e:
                self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}", "ERROR")
                return False
        
        return True
    
    def test_role_based_access(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π...")
        
        # –¢–µ—Å—Ç: Recruiter –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Ç–æ–∫–∏
        if "recruiter" in self.tokens:
            self.set_auth_header("recruiter")
            
            stream_data = {"name": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫"}
            
            try:
                response = self.session.post(f"{API_BASE_URL}/streams/", json=stream_data)
                if response.status_code == 403:
                    self.log("‚úÖ Recruiter –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤")
                else:
                    self.log(f"‚ùå Recruiter –ø–æ–ª—É—á–∏–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {response.status_code}", "ERROR")
                    return False
            except Exception as e:
                self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ recruiter: {e}", "ERROR")
                return False
        
        return True
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ–ª–µ–π –∏ –ø–æ—Ç–æ–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        if not self.test_api_health():
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            ("admin@test.com", "adminpass123", "admin"),
            ("recruit.lead@test.com", "leadpass123", "recruit_lead"),
            ("senior.recruiter@test.com", "seniorpass123", "senior_recruiter"),
            ("recruiter@test.com", "recruiterpass123", "recruiter"),
        ]
        
        for email, password, role in test_users:
            if not self.create_test_user(email, password, role):
                return False
            if not self.login_user(email, password, role):
                return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        tests = [
            self.test_stream_management,
            self.test_user_management,
            self.test_analytics,
            self.test_role_based_access,
        ]
        
        for test in tests:
            if not test():
                return False
        
        self.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = RoleIntegrationTester()
    
    try:
        success = tester.run_all_tests()
        if success:
            print("\n‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
            print("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ –ø–æ—Ç–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï–£–î–ê–ß–ù–ê!")
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–ª–µ–π –∏ –ø–æ—Ç–æ–∫–æ–≤.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

