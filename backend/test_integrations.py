"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import asyncio
from sqlalchemy.orm import sessionmaker
from app.core.database import engine
from app.core.config import settings
from app.services.integration_service import IntegrationService
from app.schemas.integration import (
    PlatformIntegrationCreate, SearchCandidatesRequest, ImportCandidateRequest
)
from app.models.integration import IntegrationPlatform

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

async def test_integration_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    
    db = SessionLocal()
    service = IntegrationService(db)
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        integrations = await service.get_integrations()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {len(integrations)}")
        for integration in integrations:
            print(f"   - {integration.name} ({integration.platform.value}) - {integration.status.value}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        test_integration_data = PlatformIntegrationCreate(
            platform=IntegrationPlatform.LINKEDIN,
            name="Test LinkedIn Integration",
            description="–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LinkedIn",
            is_active=True,
            auto_sync=True,
            sync_interval_hours=24,
            search_keywords=["Python", "React"],
            search_locations=["–ú–æ—Å–∫–≤–∞"],
            search_experience_min=2,
            search_experience_max=5,
            search_salary_min=100000,
            search_salary_max=200000
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è created_by
        from app.models.user import User
        user = db.query(User).first()
        if not user:
            print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
        else:
            try:
                test_integration = await service.create_integration(test_integration_data, user.id)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {test_integration.name} (ID: {test_integration.id})")
                
                # 3. –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                print("\n3. –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                search_request = SearchCandidatesRequest(
                    platform=IntegrationPlatform.LINKEDIN,
                    keywords=["Python", "Django"],
                    locations=["–ú–æ—Å–∫–≤–∞"],
                    experience_min=2,
                    experience_max=5,
                    limit=10
                )
                
                candidates = await service.search_candidates(search_request)
                print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
                for candidate in candidates:
                    print(f"   - {candidate.first_name} {candidate.last_name} ({candidate.platform.value})")
                
                # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                print("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                external_candidates = await service.get_external_candidates(limit=10)
                print(f"   –í—Å–µ–≥–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(external_candidates)}")
                
                # 5. –ò–º–ø–æ—Ä—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã)
                if external_candidates:
                    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
                    candidate_to_import = external_candidates[0]
                    if not candidate_to_import.is_imported:
                        import_request = ImportCandidateRequest(
                            external_candidate_id=candidate_to_import.id,
                            create_internal_user=True,
                            import_notes="–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç"
                        )
                        
                        internal_user = await service.import_candidate(import_request, user.id)
                        print(f"   ‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {internal_user.full_name} (ID: {internal_user.id})")
                    else:
                        print(f"   ‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç {candidate_to_import.first_name} —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                
                # 6. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                try:
                    sync_result = await service.sync_integration(test_integration.id)
                    print(f"   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sync_result}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                
                # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
                print("\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
                logs = await service.get_integration_logs(test_integration.id, limit=5)
                print(f"   –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤: {len(logs)}")
                for log in logs:
                    print(f"   - {log.operation_type}: {log.status} - {log.message}")
                
                # 8. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                print("\n8. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
                await service.delete_integration(test_integration.id)
                print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        db.close()

async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    try:
        import requests
        
        base_url = "http://localhost:8000/api"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è)
        print("   ‚ö†Ô∏è –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoints
        endpoints = [
            "/integrations/",
            "/integrations/platforms/supported",
            "/integrations/stats/overview"
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
                print(f"   {endpoint}: {response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"   {endpoint}: ‚ùå {e}")
        
    except ImportError:
        print("   ‚ö†Ô∏è requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_integration_service())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã API
    asyncio.run(test_api_endpoints())
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
